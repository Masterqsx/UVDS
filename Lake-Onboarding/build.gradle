buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'mysql:mysql-connector-java:5.1.39'
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'org.springframework.boot' version '2.0.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.6.RELEASE'
}

bootJar {
    enabled = false
}

jar {
    enabled = true
    baseName = 'Lake-Onboarding'
    version = project.properties['version']
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-jersey'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'mysql:mysql-connector-java:5.1.39'
    implementation 'org.apache.commons:commons-lang3:3.8'
    implementation project(':UVDS-Common')

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.glassfish.jersey.test-framework:jersey-test-framework-core:2.27'
    testImplementation 'org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-inmemory:2.27'
    testImplementation 'com.h2database:h2:1.4.197'
}
/*
task dbRemove {
    def mysql = buildscript.configurations.classpath.find { it.toString().contains("mysql-connector-java") }
    URLClassLoader loader = GroovyObject.class.classLoader
    loader.addURL(file(mysql).toURL())

    gradle.ext.sql = groovy.sql.Sql.newInstance(project.properties['dbUrl']
            , project.properties['dbUserId']
            , project.properties['dbPassword']
            , project.properties['dbDriver'])

    gradle.ext.sql.execute(new File(project.rootDir.toString() + '/Lake-Onboarding/db/scripts/remove_database.sql').text)
    gradle.ext.sql.execute(new File(project.rootDir.toString() + '/Lake-Onboarding/db/scripts/remove_testdatabase.sql').text)
}

task dbCreate {
    mustRunAfter(dbRemove)
    gradle.ext.sql.execute(new File(project.rootDir.toString() + '/Lake-Onboarding/db/scripts/create_database.sql').text)
    gradle.ext.sql.execute(new File(project.rootDir.toString() + '/Lake-Onboarding/db/scripts/create_testdatabase.sql').text)
}


task dbRecreate {
    dependsOn 'dbRemove', 'dbCreate'
}

task datastoreRecreate {
    dependsOn 'dbRecreate'
}*/

